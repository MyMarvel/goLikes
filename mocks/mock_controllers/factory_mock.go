// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	controllers "likes_handler/controllers"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFactory is a mock of IFactory interface.
type MockIFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIFactoryMockRecorder
}

// MockIFactoryMockRecorder is the mock recorder for MockIFactory.
type MockIFactoryMockRecorder struct {
	mock *MockIFactory
}

// NewMockIFactory creates a new mock instance.
func NewMockIFactory(ctrl *gomock.Controller) *MockIFactory {
	mock := &MockIFactory{ctrl: ctrl}
	mock.recorder = &MockIFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFactory) EXPECT() *MockIFactoryMockRecorder {
	return m.recorder
}

// NewIAccount mocks base method.
func (m *MockIFactory) NewIAccount(arg0 string) controllers.IAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIAccount", arg0)
	ret0, _ := ret[0].(controllers.IAccount)
	return ret0
}

// NewIAccount indicates an expected call of NewIAccount.
func (mr *MockIFactoryMockRecorder) NewIAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIAccount", reflect.TypeOf((*MockIFactory)(nil).NewIAccount), arg0)
}

// NewIDatabase mocks base method.
func (m *MockIFactory) NewIDatabase(arg0, arg1 string) controllers.IDatabase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIDatabase", arg0, arg1)
	ret0, _ := ret[0].(controllers.IDatabase)
	return ret0
}

// NewIDatabase indicates an expected call of NewIDatabase.
func (mr *MockIFactoryMockRecorder) NewIDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIDatabase", reflect.TypeOf((*MockIFactory)(nil).NewIDatabase), arg0, arg1)
}
